<?php

namespace ContainerRWbhxvk;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPimcoreAdmin_Security_AdminAuthenticatorService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'pimcore_admin.security.admin_authenticator' shared autowired service.
     *
     * @return \Pimcore\Bundle\AdminBundle\Security\Guard\AdminAuthenticator
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/symfony/src/Symfony/Component/Security/Http/EntryPoint/AuthenticationEntryPointInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/symfony/src/Symfony/Component/Security/Guard/AuthenticatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/symfony/src/Symfony/Component/Security/Guard/AbstractGuardAuthenticator.php';
        include_once \dirname(__DIR__, 4).'/vendor/pimcore/pimcore/bundles/AdminBundle/Security/Guard/AdminAuthenticator.php';

        $container->services['pimcore_admin.security.admin_authenticator'] = $instance = new \Pimcore\Bundle\AdminBundle\Security\Guard\AdminAuthenticator(($container->services['security.token_storage'] ?? $container->getSecurity_TokenStorageService()), ($container->services['router'] ?? $container->getRouterService()), ($container->services['event_dispatcher'] ?? $container->getEventDispatcherService()), ($container->services['Symfony\\Contracts\\Translation\\TranslatorInterface'] ?? $container->getTranslatorInterfaceService()), ($container->privates['security.http_utils'] ?? $container->getSecurity_HttpUtilsService()), ($container->services['pimcore_admin.security.bruteforce_protection_handler'] ?? $container->getPimcoreAdmin_Security_BruteforceProtectionHandlerService()));

        $a = ($container->services['monolog.logger.security'] ?? $container->getMonolog_Logger_SecurityService());

        $instance->setLogger($a);
        $instance->setLogger($a);

        return $instance;
    }
}
