services:
    _defaults:
        autowire: true
        autoconfigure: true

    #
    # RUNTIME CACHE
    #

    Pimcore\Cache\Runtime:
        public: true
        synthetic: true

    pimcore.cache.adapter.null:
        class: Symfony\Component\Cache\Adapter\NullAdapter

    pimcore.cache.adapter.null_tag_aware:
        class: Symfony\Component\Cache\Adapter\TagAwareAdapter
        arguments: ['@pimcore.cache.adapter.null', null]

    pimcore.cache.adapter.pdo:
        class: Symfony\Component\Cache\Adapter\PdoAdapter
        arguments:
            - '@doctrine.dbal.default_connection'
            - ''
            - 31536000  # 1 year

    pimcore.cache.adapter.pdo_tag_aware:
        class: Symfony\Component\Cache\Adapter\TagAwareAdapter
        arguments: [ '@pimcore.cache.adapter.pdo', null ]

    pimcore.cache.adapter.redis_tag_aware:
        class: Symfony\Component\Cache\Adapter\RedisTagAwareAdapter
        lazy: true
        arguments:
            - null
            - null
            - 0
            - '@cache.default_marshaller'
        tags:
            - { name: cache.pool, provider: cache.default_redis_provider, clearer: cache.default_clearer }
            - { name: monolog.logger, channel: cache }
        calls:
            - [setLogger, ['@logger']]

    #
    # PIMCORE CACHE
    #

    # the actual core handler which is used from Pimcore\Cache
    # the pimcore.cache.core.pool service is defined by config
    # and set in PimcoreExtension

    Pimcore\Cache\Core\CoreCacheHandler:
        public: true
        arguments:
            - '@pimcore.cache.pool'
            - '@Pimcore\Cache\Core\WriteLock'
            - '@event_dispatcher'
        calls:
            - [setLogger, ['@logger']]
        tags:
            - { name: monolog.logger, channel: cache }

    # write lock handles locking between processes
    Pimcore\Cache\Core\WriteLock:
        arguments: ['@pimcore.cache.pool']
        calls:
            - [setLogger, ['@logger']]
        tags:
            - { name: monolog.logger, channel: cache }
