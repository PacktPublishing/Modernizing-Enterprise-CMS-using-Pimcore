<?php

namespace ContainerX4LZcJf;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDocumentRendererService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'Pimcore\Document\Renderer\DocumentRenderer' shared autowired service.
     *
     * @return \Pimcore\Document\Renderer\DocumentRenderer
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/pimcore/pimcore/lib/Document/Renderer/DocumentRendererInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/pimcore/pimcore/lib/Document/Renderer/DocumentRenderer.php';

        $container->services['Pimcore\\Document\\Renderer\\DocumentRenderer'] = $instance = new \Pimcore\Document\Renderer\DocumentRenderer(($container->services['Pimcore\\Http\\RequestHelper'] ?? $container->getRequestHelperService()), ($container->privates['Pimcore\\Templating\\Renderer\\ActionRenderer'] ?? $container->getActionRendererService()), ($container->privates['fragment.renderer.inline'] ?? $container->load('getFragment_Renderer_InlineService')), ($container->privates['Pimcore\\Routing\\Dynamic\\DocumentRouteHandler'] ?? $container->getDocumentRouteHandlerService()), ($container->services['Pimcore\\Targeting\\Document\\DocumentTargetingConfigurator'] ?? $container->getDocumentTargetingConfiguratorService()), ($container->services['event_dispatcher'] ?? $container->getEventDispatcherService()), ($container->services['Pimcore\\Localization\\LocaleServiceInterface'] ?? $container->load('getLocaleServiceInterfaceService')));

        $instance->setContainerService(($container->privates['Pimcore\\Twig\\Extension\\Templating\\Placeholder\\ContainerService'] ?? ($container->privates['Pimcore\\Twig\\Extension\\Templating\\Placeholder\\ContainerService'] = new \Pimcore\Twig\Extension\Templating\Placeholder\ContainerService())));

        return $instance;
    }
}
